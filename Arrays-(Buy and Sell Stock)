Approach-1

BruteForce
tc-O(N*N)
///////////////////code///////////////////////////////////////////////
class Solution {
    public int maxProfit(int[] arr) {
        int n = arr.length;
        int max = 0;
        for(int i=0;i<n;i++){
            for(int j =i+1;j<n;j++){
                max = Math.max(max,arr[j]-arr[i]);
            }
        }
        
        return max;
    }
}
///////////////////////code////////////////////////////////////////////

Approach-2-O(N)
1.Dp
////////////////////////////////////code///////////////////////////////
class Solution {
    public int maxProfit(int[] prices) {
        int min_value = Integer.MAX_VALUE;
        int max_profit=0;
        
        for(int i=0;i<prices.length;i++){
            if(prices[i]<min_value){
                min_value = prices[i];
            }
            else if(prices[i]-min_value>max_profit){
                max_profit = prices[i]-min_value;
            }
        }
        
     return max_profit;
    }
}
/////////////////////////code////////////////////////////////////////////////
