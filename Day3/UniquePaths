Approach-1
//Recursion
class Solution {
    public int uniquePaths(int m, int n) {
        return f(m,n,0,0);
    }
    
    int f(int m,int n,int i,int j){
        if(i<0 || j<0 || i>=m || j>=n)return 0;
        if(i == m-1 && j == n-1)return 1;
        
        int down = f(m,n,i+1,j);
        int up = f(m,n,i,j+1);
        return (up+down);
    }
}




Approach-2

dp

class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int r[]:dp)Arrays.fill(r,-1);
        return f(m,n,0,0,dp);
    }
    
    int f(int m,int n,int i,int j,int dp[][]){
        if(i<0 || j<0 || i>=m || j>=n)return 0;
        if(i == m-1 && j == n-1)return 1;
        if(dp[i][j]!=-1)return dp[i][j];
        
        int down = f(m,n,i+1,j,dp);
        int up = f(m,n,i,j+1,dp);
        return dp[i][j] = (up+down);
    }
}

Approach-3
Combinatrics

class Solution {
    public int uniquePaths(int m, int n) {
        double N = m+n-2;
        double d = m-1;
        double res2 = 1;
        for(double i=1;i<=d;i++){
             res2  = res2*(N-d+i)/i;
        }
        return ((int) res2);
    }
}
