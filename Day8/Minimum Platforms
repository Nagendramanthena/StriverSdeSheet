
My Approach
//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        
        while(t-- > 0)
        {
            String str[] = read.readLine().trim().split(" ");
            int n = Integer.parseInt(str[0]);
            
            int arr[] = new int[n];
            int dep[] = new int[n];
            
            str = read.readLine().trim().split(" ");
            for(int i = 0; i < n; i++)
              arr[i] = Integer.parseInt(str[i]);
            str = read.readLine().trim().split(" ");
            for(int i = 0; i < n; i++)
                dep[i] = Integer.parseInt(str[i]);
                
            System.out.println(new Solution().findPlatform(arr, dep, n));
        }
    }
    
    
}



// } Driver Code Ends


//User function Template for Java

class Solution
{
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    static int findPlatform(int arr[], int dep[], int n)
    {
        // add your code here
        
        train t[] = new train[n];
        for(int i=0;i<n;i++){
            t[i] = new train(arr[i],dep[i]);
        }
        Arrays.sort(t,(a,b)->(a.arrival != b.arrival)?a.arrival-b.arrival:(a.departure-b.departure));
        int platforms = 1;
        PriorityQueue<Integer> pq  =new PriorityQueue<>((a,b)->a-b);
        pq.add(t[0].departure);
        
        for(int i=1;i<n;i++){
            if(t[i].arrival<pq.peek()){
                pq.add(t[i].departure);
                platforms = Math.max(platforms,pq.size());
            }else{
                while(!pq.isEmpty() && pq.peek()<t[i].arrival)pq.poll();
                pq.add(t[i].departure);
                platforms = Math.max(platforms,pq.size());
            }
        }
        return platforms;
        
    }
    
}
class train{
    int arrival;
    int departure;
    
    public train(int arrival,int departure){
        this.arrival = arrival;
        this.departure = departure;
    }
}




//User function Template for Java

//Java O(N)

class Solution
{
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    static int findPlatform(int arrival[], int departure[], int n)
    {
        // add your code here
       // As time range from 0 to 2359 in 
    // 24 hour clock, we declare an array
    // for values from 0 to 2360
    int[] platform = new int[2361];
    int requiredPlatform = 1;
    
    for(int i = 0; i < n; i++)
    {
        
        // Increment the platforms for arrival
        ++platform[arrival[i]]; 

         // Once train departs we decrease 
         // the platform count
        --platform[departure[i] + 1];
    }
    
    // We are running loop till 2361 because
    // maximum time value in a day can be 23:60
    for(int i = 1; i < 2361; i++) 
    {
        
        // Taking cumulative sum of platform 
        // give us required number of 
        // platform for every minute
        platform[i] = platform[i] +
                      platform[i - 1]; 
        requiredPlatform = Math.max(requiredPlatform, 
                                    platform[i]);
    }
    return requiredPlatform;
        
    }
    
}
class train{
    int arrival;
    int departure;
    
    public train(int arrival,int departure){
        this.arrival = arrival;
        this.departure = departure;
    }
}

