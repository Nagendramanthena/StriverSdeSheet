class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        List<Integer> temp  = new ArrayList<>();
        f(0,target,candidates,temp,ans);
        return ans;
        
    }
    
    void f(int index,int t,int arr[],List<Integer> temp,List<List<Integer>> ans){
        
        if(t == 0){
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i=index;i<arr.length;i++){
            if(i>index && arr[i] == arr[i-1])continue;
            if(arr[i]>t)break;
            temp.add(temp.size(),arr[i]);
            f(i+1,t-arr[i],arr,temp,ans);
            temp.remove(temp.size()-1);
        }
        //System.out.println(temp);
    }
}

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        HashSet<List<Integer>> tempans = new HashSet<>();
        f(tempans,new ArrayList<Integer>(),candidates,target,0);
        List<List<Integer>> ans = new ArrayList<>(tempans);
        return ans;
    }
    
    public void f(HashSet<List<Integer>> ans,List<Integer> temp,int c[],int t,int index){
        
        if(t == 0){
            ans.add(new ArrayList<>(temp));
        }
        if(index == c.length){
            return;
        }
        
        //pick
        if(t-c[index]>=0){
            temp.add(c[index]);
            f(ans,temp,c,t-c[index],index+1);
            temp.remove(temp.size()-1);
        }
        
        f(ans,temp,c,t,index+1);
    }
}
