Approach1
Brute Force

Approach2
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0)return 0;
        int n = nums.length;
        int max = 1;
        HashMap<Integer,Integer> hm  =new HashMap<>();
        for(int i=0;i<n;i++){
            hm.put(nums[i],1);
        }
        HashMap<Integer,Integer> hm2 = new HashMap<>();
        for(int i=0;i<n;i++){
            if(hm2.containsKey(nums[i]))continue;
            int x = nums[i];
            int cnt = 1;
            hm2.put(x,1);
            while(hm.containsKey(x+1)){
                cnt++;x++;
                hm2.put(x,1);
            }
            max =Math.max(max,cnt);
        }
        return max;
    }
}

Approach3(hashMap)

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0)return 0;
        int n = nums.length;
        int max = 1;
        HashMap<Integer,Integer> hm  =new HashMap<>();
        for(int i=0;i<n;i++){
            hm.put(nums[i],1);
        }
        for(Map.Entry<Integer,Integer> me:hm.entrySet()){
            int key = me.getKey();
            if(!hm.containsKey(key-1)){
                int x=1;
                while(hm.containsKey(key+1)){
                    x++;
                    key++;
                }
                max = Math.max(max,x);
            }
        }
        return max;
    }
}
